{"version":3,"sources":["assets/example2.mp4","App.js","index.js"],"names":["App","video","useRef","canvas","useState","images","setImages","isProcessing","setIsProcessing","className","ref","src","exampleVideo","width","height","disabled","onClick","newImages","i","interval","setInterval","ctx","current","getContext","currentTime","drawImage","push","toDataURL","clearInterval","length","map","image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAAe,MAA0B,qC,eCwD1BA,MAlDf,WACE,IAAIC,EAAQC,iBAAO,MACfC,EAASD,iBAAO,MAFP,EAIeE,mBAAS,IAJxB,mBAINC,EAJM,KAIEC,EAJF,OAK2BF,oBAAS,GALpC,mBAKNG,EALM,KAKQC,EALR,KA4Bb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,uBAAOA,UAAU,aAAaC,IAAKT,EAAOU,IAAKC,IAC/C,sBAAKH,UAAU,cAAf,UACE,wCACA,wBAAQC,IAAKP,EAAQU,MA3Bf,IA2B6BC,OA1B5B,MA2BP,wBAAQL,UAAU,cAAcM,SAAUR,EAAcS,QAzB3C,WACnBR,GAAgB,GAChB,IAAIS,EAAY,GACZC,EAAI,EACJC,EAAWC,aAAY,WACzB,IAAMC,EAAMlB,EAAOmB,QAAQC,WAAW,MACtCtB,EAAMqB,QAAQE,YAAc,GAAKN,EAAI,EACrCG,EAAII,UAAUxB,EAAMqB,QAAS,EAAG,EAVtB,IACC,KAUXL,EAAUS,KAAKvB,EAAOmB,QAAQK,UAAU,eACpCT,EAAI,KACNU,cAAcT,GACdX,GAAgB,GAChBF,EAAUW,IAEZC,MACC,MAUG,gCAECb,EAAOwB,QACR,gCACE,0CACCxB,EAAOyB,KAAI,SAACC,EAAOb,GAAR,OACV,qBAAaP,IAAKoB,EAAOC,IAAI,MAAMnB,MAAO,IAAKC,OAAQ,IAA7CI,eC1CxBe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.307b5a49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/example2.db348eb3.mp4\";","import {useRef, useState} from \"react\";\nimport exampleVideo from './assets/example2.mp4'\n\nimport './App.css';\n\n\nfunction App() {\n  let video = useRef(null);\n  let canvas = useRef(null);\n\n  const [images, setImages] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const width = 400;\n  const height = 250;\n\n  const processVideo = () => {\n    setIsProcessing(true);\n    let newImages = [];\n    let i = 0;\n    let interval = setInterval(() => {\n      const ctx = canvas.current.getContext(\"2d\");\n      video.current.currentTime = 10 * i + 1;\n      ctx.drawImage(video.current, 0, 0, width, height);\n      newImages.push(canvas.current.toDataURL(\"image/jpeg\"));\n      if (i > 30) {\n        clearInterval(interval);\n        setIsProcessing(false);\n        setImages(newImages);\n      }\n      i++;\n    }, 500);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n        <video className=\"App__video\" ref={video} src={exampleVideo}/>\n        <div className=\"App__canvas\">\n          <h3>Video:</h3>\n          <canvas ref={canvas} width={width} height={height}/>\n          <button className=\"App__button\" disabled={isProcessing} onClick={processVideo}>Process video</button>\n        </div>\n        {!!images.length &&\n          <div>\n            <h3>Results:</h3>\n            {images.map((image, i) => (\n              <img key={i} src={image} alt=\"...\" width={160} height={90}/>\n            ))}\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}