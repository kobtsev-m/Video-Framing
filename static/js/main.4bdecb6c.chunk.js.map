{"version":3,"sources":["components/FramesList/FramesList.tsx","components/App/App.tsx","index.tsx"],"names":["FramesList","props","frames","className","map","frame","i","src","alt","width","height","App","useState","setFrames","videoObjectUrl","setVideoObjectUrl","videoDuration","setVideoDuration","imagesToLoad","setImagesToLoad","isVideoLoaded","setIsVideoLoaded","isProcessing","setIsProcessing","handleVideoProcess","e","a","preventDefault","Promise","resolve","videoHtmlElement","document","createElement","addEventListener","seekResolve","canvas","context","getContext","videoWidth","interval","localFrames","currentTime","length","r","drawImage","imageData","toDataURL","push","newFrames","onSubmit","Math","floor","controls","type","defaultValue","onChange","percentage","parseInt","target","value","color","outline","disabled","lang","files","videoFile","preload","onloadedmetadata","URL","createObjectURL","duration","toFixed","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4bdecb6c.chunk.js","sourcesContent":["import { Card, CardBody } from 'reactstrap';\nimport { FC } from 'react';\n\ninterface Props {\n  frames: string[];\n}\n\nexport const FramesList: FC<Props> = (props) => {\n  const { frames } = props;\n  return (\n    <Card className='w-100 mt-3'>\n      <CardBody>\n        <h3>Frames:</h3>\n        <hr />\n        {frames.map((frame, i) => (\n          <img\n            key={i}\n            src={frame}\n            alt='...'\n            width={160}\n            height={90}\n            className='m-2'\n          />\n        ))}\n      </CardBody>\n    </Card>\n  );\n};\n","import { ChangeEvent, FormEvent, useState } from 'react';\nimport { BarLoader } from 'react-spinners';\nimport { FramesList } from '../FramesList/FramesList';\nimport './App.scss';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from 'reactstrap';\n\nconst FPS = 30;\n\nfunction App() {\n  const [frames, setFrames] = useState<string[]>([]);\n\n  const [videoObjectUrl, setVideoObjectUrl] = useState<string>('');\n  const [videoDuration, setVideoDuration] = useState<number>(0);\n  const [imagesToLoad, setImagesToLoad] = useState<number>(0);\n\n  const [isVideoLoaded, setIsVideoLoaded] = useState<boolean>(false);\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n\n  const handleVideoChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    let videoFile = e.target.files[0];\n    let videoHtmlElement = document.createElement('video');\n    videoHtmlElement.preload = 'metadata';\n    videoHtmlElement.onloadedmetadata = () => {\n      setVideoObjectUrl(URL.createObjectURL(videoFile));\n      setVideoDuration(+videoHtmlElement.duration.toFixed(1));\n      setImagesToLoad(Math.floor(videoHtmlElement.duration * FPS));\n      setIsVideoLoaded(true);\n    };\n    videoHtmlElement.src = URL.createObjectURL(videoFile);\n  };\n\n  const handleImagesNumberChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const percentage = parseInt(e.target.value);\n    setImagesToLoad(Math.floor((percentage / 100) * videoDuration * FPS));\n  };\n\n  const handleVideoProcess = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!videoObjectUrl || !imagesToLoad) {\n      return;\n    }\n    setIsProcessing(true);\n    const newFrames = await new Promise<string[]>(async (resolve) => {\n      let videoHtmlElement = document.createElement('video');\n\n      let seekResolve: any;\n      videoHtmlElement.addEventListener('seeked', async () => {\n        if (seekResolve) {\n          seekResolve();\n        }\n      });\n\n      videoHtmlElement.addEventListener('loadeddata', async () => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n        const [width, height] = [\n          videoHtmlElement.videoWidth,\n          videoHtmlElement.videoWidth\n        ];\n        canvas.width = width;\n        canvas.height = height;\n\n        const interval = videoDuration / imagesToLoad;\n        let localFrames: string[] = [];\n        let currentTime = 0;\n\n        while (localFrames.length < imagesToLoad) {\n          videoHtmlElement.currentTime = currentTime;\n          await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\n\n          context.drawImage(videoHtmlElement, 0, 0, width, height);\n          const imageData = canvas.toDataURL('image/jpeg');\n          localFrames.push(imageData);\n\n          currentTime += interval;\n        }\n\n        resolve(localFrames);\n      });\n\n      videoHtmlElement.src = videoObjectUrl;\n    });\n    setIsProcessing(false);\n    setFrames(newFrames);\n  };\n\n  return (\n    <div className='App'>\n      <Container className='App__container'>\n        <Card className='App__formCard'>\n          <CardBody>\n            <Form onSubmit={handleVideoProcess}>\n              {!isVideoLoaded ? (\n                <FormGroup>\n                  <Label>Select video to process:</Label>\n                  <Input type='file' lang='en' onChange={handleVideoChange} />\n                </FormGroup>\n              ) : (\n                <>\n                  <FormGroup>\n                    <p>\n                      <b>Video duration:</b> {videoDuration}\n                    </p>\n                    <p>\n                      <b>Video frames per second:</b> {FPS}\n                    </p>\n                    <p>\n                      <b>Total frames:</b> {Math.floor(videoDuration * FPS)}\n                    </p>\n                  </FormGroup>\n                  <FormGroup>\n                    <video\n                      className='w-100 rounded'\n                      src={videoObjectUrl}\n                      controls={true}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>Number of images: {imagesToLoad}</Label>\n                    <Input\n                      type='range'\n                      defaultValue={100}\n                      onChange={handleImagesNumberChange}\n                    />\n                  </FormGroup>\n                  <FormGroup className='d-flex align-items-center'>\n                    <Button\n                      type='submit'\n                      color='dark'\n                      outline={true}\n                      disabled={isProcessing}\n                      className='me-3'\n                    >\n                      Process video\n                    </Button>\n                    {isProcessing && <BarLoader />}\n                  </FormGroup>\n                </>\n              )}\n            </Form>\n          </CardBody>\n        </Card>\n        {!!frames.length && <FramesList frames={frames} />}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'src/components/App/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}