{"version":3,"sources":["components/FrameList/FrameList.tsx","utils/video.utils.ts","components/App/App.tsx","index.tsx"],"names":["FrameList","props","frames","className","map","frame","i","src","alt","width","height","VideoUtils","getVideoData","video","Promise","resolve","reject","videoHtmlElement","document","createElement","videoUrlObject","URL","createObjectURL","addEventListener","Error","a","getInfo","mediaInfo","media","track","name","split","slice","join","urlObject","duration","parseFloat","Duration","fps","FrameRate","framesTotal","parseInt","FrameCount","preload","getVideoFrames","videoData","imagesToLoad","setProcessingProgress","processVariant","console","log","getVideoFrames1","getVideoFrames2","getVideoFrames3","getVideoFrames4","seekResolve","canvas","context","getContext","videoWidth","interval","localFrames","currentTime","length","r","drawImage","push","toDataURL","Math","round","framesCount","__convertFrameToFile","blob","fileName","File","type","toBlob","requestAnimationFrame","load","App","useState","setFrames","isFrames","setIsFrames","isModalOpen","setIsModalOpen","setVideoData","setImagesToLoad","loaderProgress","setLoaderProgress","error","setError","isProcessing","setIsProcessing","setProcessVariant","processingProgress","handleVideoChange","e","target","files","data","newImagesToLoad","min","newLoaderProgress","ceil","message","handleVideoProcess","preventDefault","newFrames","alert","lang","onChange","centered","isOpen","onSubmit","toggle","controls","style","maxHeight","inputMode","pattern","value","newValue","isNaN","floor","color","outline","onClick","disabled","size","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.279aee90.chunk.js","sourcesContent":["import { Card, CardBody } from 'reactstrap';\nimport { FC } from 'react';\n\ninterface Props {\n  frames: string[];\n}\n\nexport const FrameList: FC<Props> = (props) => {\n  const { frames } = props;\n  return (\n    <Card className='w-100 mt-3'>\n      <CardBody>\n        <h3>Frames:</h3>\n        <hr />\n        {frames.map((frame, i) => (\n          <img\n            key={i}\n            src={frame}\n            alt='...'\n            width={160}\n            height={90}\n            className='m-2'\n          />\n        ))}\n      </CardBody>\n    </Card>\n  );\n};\n","// @ts-ignore\nimport { getInfo } from 'react-mediainfo';\n\nconst VIDEO_READ_ERROR =\n  \"Couldn't process the video. Please ensure the video is one of the supported formats (MP4, MOV, M4V) and streamable.\";\n\nexport interface VideoData {\n  name: string;\n  urlObject: string;\n  duration: number;\n  fps: number;\n  framesTotal: number;\n}\n\nexport const VideoUtils = {\n  getVideoData: (video: File) => {\n    return new Promise<VideoData>((resolve, reject) => {\n      const videoHtmlElement = document.createElement('video');\n      const videoUrlObject = URL.createObjectURL(video);\n\n      videoHtmlElement.addEventListener('error', () => {\n        reject(new Error(VIDEO_READ_ERROR));\n      });\n\n      videoHtmlElement.addEventListener('loadedmetadata', async () => {\n        const mediaInfo = (await getInfo(video)).media.track[0];\n        resolve({\n          name: video.name.split('.').slice(0, -1).join('.'),\n          urlObject: videoUrlObject,\n          duration: parseFloat(mediaInfo.Duration),\n          fps: parseFloat(mediaInfo.FrameRate),\n          framesTotal: parseInt(mediaInfo.FrameCount)\n        });\n      });\n\n      videoHtmlElement.preload = 'metadata';\n      videoHtmlElement.src = videoUrlObject;\n    });\n  },\n  getVideoFrames: (\n    videoData: VideoData,\n    imagesToLoad: number,\n    setProcessingProgress: (value: number) => void,\n    processVariant: number\n  ) => {\n    console.log('Variant:', processVariant);\n    if (processVariant === 1) {\n      return VideoUtils.getVideoFrames1(\n        videoData,\n        imagesToLoad,\n        setProcessingProgress\n      );\n    }\n    if (processVariant === 2) {\n      return VideoUtils.getVideoFrames2(\n        videoData,\n        imagesToLoad,\n        setProcessingProgress\n      );\n    }\n    if (processVariant === 3) {\n      return VideoUtils.getVideoFrames3(\n        videoData,\n        imagesToLoad,\n        setProcessingProgress\n      );\n    }\n    return VideoUtils.getVideoFrames4(\n      videoData,\n      imagesToLoad,\n      setProcessingProgress\n    );\n  },\n  getVideoFrames1: (\n    videoData: VideoData,\n    imagesToLoad: number,\n    setProcessingProgress: (value: number) => void\n  ) => {\n    return new Promise<string[]>(async (resolve) => {\n      let videoHtmlElement = document.createElement('video');\n\n      let seekResolve: any;\n      videoHtmlElement.addEventListener('seeked', async () => {\n        if (seekResolve) {\n          seekResolve();\n        }\n      });\n\n      videoHtmlElement.addEventListener('loadeddata', async () => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        const [width, height] = [\n          videoHtmlElement.videoWidth,\n          videoHtmlElement.videoWidth\n        ];\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const interval = videoData.duration / imagesToLoad;\n        let localFrames: string[] = [];\n        let currentTime = 0;\n\n        while (localFrames.length < imagesToLoad) {\n          videoHtmlElement.currentTime = currentTime;\n          await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\n\n          context.drawImage(videoHtmlElement, 0, 0, width, height);\n          localFrames.push(canvas.toDataURL('image/jpeg'));\n          setProcessingProgress(Math.round(localFrames.length / imagesToLoad * 100));\n\n          currentTime += interval;\n        }\n\n        resolve(localFrames);\n      });\n\n      videoHtmlElement.src = videoData.urlObject;\n    });\n  },\n  getVideoFrames2: (\n    videoData: VideoData,\n    imagesToLoad: number,\n    setProcessingProgress: (value: number) => void\n  ) => {\n    return new Promise<File[]>(async (resolve) => {\n      let videoHtmlElement = document.createElement('video');\n\n      let seekResolve: any;\n      videoHtmlElement.addEventListener('seeked', async () => {\n        if (seekResolve) {\n          seekResolve();\n        }\n      });\n\n      videoHtmlElement.addEventListener('loadeddata', async () => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n        const [width, height] = [\n          videoHtmlElement.videoWidth,\n          videoHtmlElement.videoWidth\n        ];\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const interval = videoData.duration / imagesToLoad;\n        const localFrames: File[] = [];\n        let framesCount = 0;\n        let currentTime = 0;\n\n        const __convertFrameToFile = (blob: Blob | null) => {\n          if (!!blob) {\n            const fileName = `${videoData.name}_${framesCount}.jpeg`;\n            const fileConfig = { type: 'jpeg' };\n            localFrames.push(new File([blob], fileName, fileConfig));\n          }\n          framesCount++;\n          setProcessingProgress(Math.round(framesCount / imagesToLoad * 100));\n          if (framesCount === imagesToLoad) {\n            resolve(localFrames);\n          }\n        };\n\n        for (let i = 0; i < imagesToLoad; ++i) {\n          videoHtmlElement.currentTime = currentTime;\n          await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\n\n          context.drawImage(videoHtmlElement, 0, 0, width, height);\n          canvas.toBlob(__convertFrameToFile);\n\n          currentTime += interval;\n        }\n      });\n\n      videoHtmlElement.src = videoData.urlObject;\n    });\n  },\n  getVideoFrames3: (\n    videoData: VideoData,\n    imagesToLoad: number,\n    setProcessingProgress: (value: number) => void\n  ) => {\n    return new Promise<File[]>(async (resolve) => {\n      const videoHtmlElement = document.createElement('video');\n      const canvas = document.createElement('canvas');\n\n      let seekResolve: any;\n      videoHtmlElement.addEventListener('seeked', async () => {\n        if (seekResolve) {\n          seekResolve();\n        }\n      });\n\n      videoHtmlElement.addEventListener('loadedmetadata', () => {\n        requestAnimationFrame(() =>\n          requestAnimationFrame(async () => {\n            const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n            const [width, height] = [\n              videoHtmlElement.videoWidth,\n              videoHtmlElement.videoWidth\n            ];\n\n            canvas.width = width;\n            canvas.height = height;\n\n            const interval = videoData.duration / imagesToLoad;\n            const localFrames: File[] = [];\n            let framesCount = 0;\n            let currentTime = 0;\n\n            const __convertFrameToFile = (blob: Blob | null) => {\n              if (!!blob) {\n                const fileName = `${videoData.name}_${framesCount}.jpeg`;\n                const fileConfig = { type: 'jpeg' };\n                localFrames.push(new File([blob], fileName, fileConfig));\n              }\n              framesCount++;\n              setProcessingProgress(Math.round(framesCount / imagesToLoad * 100));\n              if (framesCount === imagesToLoad) {\n                resolve(localFrames);\n              }\n            };\n\n            for (let i = 0; i < imagesToLoad; ++i) {\n              videoHtmlElement.currentTime = currentTime;\n              await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\n\n              context.drawImage(videoHtmlElement, 0, 0, width, height);\n              canvas.toBlob(__convertFrameToFile);\n\n              currentTime += interval;\n            }\n          })\n        );\n      });\n\n      videoHtmlElement.preload = 'metadata';\n      videoHtmlElement.src = videoData.urlObject;\n    });\n  },\n  getVideoFrames4: (\n    videoData: VideoData,\n    imagesToLoad: number,\n    setProcessingProgress: (value: number) => void\n  ) => {\n    return new Promise<File[]>(async (resolve) => {\n      const videoHtmlElement = document.createElement('video');\n      const canvas = document.createElement('canvas');\n\n      let seekResolve: any;\n      videoHtmlElement.addEventListener('seeked', async () => {\n        if (seekResolve) {\n          seekResolve();\n        }\n      });\n\n      videoHtmlElement.addEventListener('loadedmetadata', () => {\n        requestAnimationFrame(() =>\n          requestAnimationFrame(async () => {\n            const context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n            const [width, height] = [\n              videoHtmlElement.videoWidth,\n              videoHtmlElement.videoWidth\n            ];\n\n            canvas.width = width;\n            canvas.height = height;\n\n            const interval = videoData.duration / imagesToLoad;\n            const localFrames: File[] = [];\n            let framesCount = 0;\n            let currentTime = 0;\n\n            const __convertFrameToFile = (blob: Blob | null) => {\n              if (!!blob) {\n                const fileName = `${videoData.name}_${framesCount}.jpeg`;\n                const fileConfig = { type: 'jpeg' };\n                localFrames.push(new File([blob], fileName, fileConfig));\n              }\n              framesCount++;\n              setProcessingProgress(Math.round(framesCount / imagesToLoad * 100));\n              if (framesCount === imagesToLoad) {\n                resolve(localFrames);\n              }\n            };\n\n            for (let i = 0; i < imagesToLoad; ++i) {\n              videoHtmlElement.currentTime = currentTime;\n              await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\n\n              context.drawImage(videoHtmlElement, 0, 0, width, height);\n              canvas.toBlob(__convertFrameToFile);\n\n              currentTime += interval;\n            }\n          })\n        );\n      });\n\n      videoHtmlElement.src = videoData.urlObject;\n      videoHtmlElement.load();\n    });\n  }\n};\n","import React, { useState } from 'react';\nimport { FrameList } from '../FrameList/FrameList';\nimport { VideoData, VideoUtils } from '../../utils/video.utils';\nimport './App.scss';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Spinner\n} from 'reactstrap';\n\nconst IMAGES_TO_LOAD_DEFAULT = 100;\n\nfunction App() {\n  const [frames, setFrames] = useState<string[] | File[]>([]);\n  const [isFrames, setIsFrames] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [videoData, setVideoData] = useState<VideoData | null>(null);\n  const [imagesToLoad, setImagesToLoad] = useState(0);\n  const [loaderProgress, setLoaderProgress] = useState(0);\n\n  const [error, setError] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processVariant, setProcessVariant] = useState(1);\n  const [processingProgress, setProcessingProgress] = useState(0);\n\n  const handleVideoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    setIsModalOpen(true);\n    setVideoData(null);\n    setError('');\n    setProcessVariant(1);\n    try {\n      const data = await VideoUtils.getVideoData(e.target.files[0]);\n      const newImagesToLoad = Math.min(\n        IMAGES_TO_LOAD_DEFAULT,\n        data.framesTotal\n      );\n      const newLoaderProgress = Math.ceil(\n        (newImagesToLoad / data.framesTotal) * 100\n      );\n      setVideoData(data);\n      setImagesToLoad(newImagesToLoad);\n      setLoaderProgress(newLoaderProgress);\n    } catch (e) {\n      setError((e as Error).message);\n    }\n  };\n\n  const handleImagesNumberInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (!videoData) {\n      return;\n    }\n    const newValue = parseInt(e.target.value);\n    const newImagesToLoad = Math.min(\n      isNaN(newValue) ? 0 : newValue,\n      videoData.framesTotal\n    );\n    const newLoaderProgress = Math.ceil(\n      (newImagesToLoad / videoData.framesTotal) * 100\n    );\n    setImagesToLoad(newImagesToLoad);\n    setLoaderProgress(newLoaderProgress);\n  };\n\n  const handleImagesNumberRangeChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (!videoData) {\n      return;\n    }\n    const newLoaderProgress = parseInt(e.target.value);\n    const newImagesToLoad = Math.floor(\n      (newLoaderProgress / 100) * videoData.framesTotal\n    );\n    setImagesToLoad(newImagesToLoad);\n    setLoaderProgress(newLoaderProgress);\n  };\n\n  const handleVideoProcess = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!videoData || !imagesToLoad) {\n      return;\n    }\n    setIsFrames(false);\n    setIsProcessing(true);\n    setProcessingProgress(0);\n    const newFrames = await VideoUtils.getVideoFrames(\n      videoData,\n      imagesToLoad,\n      setProcessingProgress,\n      processVariant\n    );\n    setIsProcessing(false);\n    setFrames(newFrames);\n    setIsFrames(processVariant === 1);\n    setIsModalOpen(false);\n    alert('Success!');\n    console.log(newFrames);\n  };\n\n  return (\n    <div className='App'>\n      <Container className='App__container'>\n        <Card className='App__formCard'>\n          <CardBody>\n            <Label>Select video to process:</Label>\n            <Input type='file' lang='en' onChange={handleVideoChange} />\n          </CardBody>\n        </Card>\n        {isFrames && <FrameList frames={frames as string[]} />}\n      </Container>\n      <Modal centered={true} isOpen={isModalOpen}>\n        <Form onSubmit={handleVideoProcess}>\n          <ModalHeader toggle={() => setIsModalOpen(false)}>\n            Video processing\n          </ModalHeader>\n          <ModalBody>\n            {error ? (\n              <div className='text-danger my-4'>{error}</div>\n            ) : !videoData ? (\n              <div className='d-flex justify-content-center my-4'>\n                <Spinner />\n              </div>\n            ) : (\n              <>\n                <FormGroup>\n                  <p>\n                    <b>Video duration:</b> {videoData.duration}\n                  </p>\n                  <p>\n                    <b>Video frames per second:</b> {videoData.fps}\n                  </p>\n                  <p>\n                    <b>Total frames:</b> {videoData.framesTotal}\n                  </p>\n                </FormGroup>\n                <FormGroup>\n                  <video\n                    className='w-100 rounded'\n                    src={videoData.urlObject}\n                    controls={true}\n                    style={{ maxHeight: '30vh' }}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label>\n                    <b>Number of images to load:</b>\n                  </Label>\n                  <Input\n                    type='text'\n                    inputMode='numeric'\n                    pattern='[-+]?[0-9]*[.,]?[0-9]+'\n                    value={imagesToLoad}\n                    onChange={handleImagesNumberInputChange}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Input\n                    type='range'\n                    value={loaderProgress}\n                    onChange={handleImagesNumberRangeChange}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label>\n                    <b>Process variant:</b>\n                  </Label>\n                  <Input\n                    type='select'\n                    onChange={(e) =>\n                      setProcessVariant(parseInt(e.target.value))\n                    }\n                  >\n                    <option value='1'>1</option>\n                    <option value='2'>2</option>\n                    <option value='3'>3</option>\n                    <option value='4'>4</option>\n                  </Input>\n                </FormGroup>\n              </>\n            )}\n          </ModalBody>\n          <ModalFooter className='flex-row-reverse justify-content-between align-items-center'>\n            {error ? (\n              <Button\n                color='dark'\n                outline={true}\n                onClick={() => setIsModalOpen(false)}\n              >\n                Close\n              </Button>\n            ) : (\n              <>\n                <Button\n                  type='submit'\n                  color='dark'\n                  outline={true}\n                  disabled={isProcessing}\n                >\n                  Process video\n                </Button>\n                {isProcessing && (\n                  <div className='d-flex align-items-center'>\n                    <Spinner size='sm' type='grow' className='me-3' />\n                    Processing: {processingProgress}%\n                  </div>\n                )}\n              </>\n            )}\n          </ModalFooter>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'src/components/App/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}