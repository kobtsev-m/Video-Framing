{"version":3,"sources":["components/FrameList/FrameList.tsx","utils/video.utils.ts","components/App/App.tsx","index.tsx"],"names":["FrameList","props","frames","className","map","frame","i","src","alt","width","height","VideoUtils","getVideoData","video","Promise","resolve","reject","videoHtmlElement","document","createElement","videoUrlObject","URL","createObjectURL","addEventListener","Error","a","getInfo","mediaInfo","media","track","name","split","slice","join","urlObject","duration","parseFloat","Duration","fps","FrameRate","framesTotal","parseInt","FrameCount","preload","getVideoFrames","videoData","imagesToLoad","processVariant","console","log","getVideoFrames1","getVideoFrames2","seekResolve","canvas","context","getContext","videoWidth","interval","localFrames","currentTime","length","r","drawImage","push","toDataURL","framesCount","__convertFrameToFile","blob","fileName","File","type","toBlob","App","useState","setFrames","isModalOpen","setIsModalOpen","setVideoData","setImagesToLoad","loaderProgress","setLoaderProgress","error","setError","isProcessing","setIsProcessing","setProcessVariant","handleVideoChange","e","target","files","data","newImagesToLoad","Math","min","newLoaderProgress","ceil","message","handleVideoProcess","preventDefault","newFrames","lang","onChange","centered","isOpen","onSubmit","toggle","controls","style","maxHeight","inputMode","pattern","value","newValue","isNaN","floor","color","outline","onClick","disabled","size","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ba1bd6c9.chunk.js","sourcesContent":["import { Card, CardBody } from 'reactstrap';\nimport { FC } from 'react';\n\ninterface Props {\n  frames: string[];\n}\n\nexport const FrameList: FC<Props> = (props) => {\n  const { frames } = props;\n  return (\n    <Card className='w-100 mt-3'>\n      <CardBody>\n        <h3>Frames:</h3>\n        <hr />\n        {frames.map((frame, i) => (\n          <img\n            key={i}\n            src={frame}\n            alt='...'\n            width={160}\n            height={90}\n            className='m-2'\n          />\n        ))}\n      </CardBody>\n    </Card>\n  );\n};\n","// @ts-ignore\r\nimport { getInfo } from 'react-mediainfo';\r\n\r\nconst VIDEO_READ_ERROR = 'Couldn\\'t process the video. Please ensure the video is one of the supported formats (MP4, MOV, M4V) and streamable.';\r\n\r\nexport interface VideoData {\r\n  name: string;\r\n  urlObject: string;\r\n  duration: number;\r\n  fps: number;\r\n  framesTotal: number;\r\n}\r\n\r\nexport const VideoUtils = {\r\n  getVideoData: (video: File) => {\r\n    return new Promise<VideoData>((resolve, reject) => {\r\n      const videoHtmlElement = document.createElement('video');\r\n      const videoUrlObject = URL.createObjectURL(video);\r\n\r\n      videoHtmlElement.addEventListener('error', () => {\r\n        reject(new Error(VIDEO_READ_ERROR));\r\n      });\r\n\r\n      videoHtmlElement.addEventListener('loadedmetadata', async () => {\r\n        const mediaInfo = (await getInfo(video)).media.track[0];\r\n        resolve({\r\n          name: video.name.split('.').slice(0, -1).join('.'),\r\n          urlObject: videoUrlObject,\r\n          duration: parseFloat(mediaInfo.Duration),\r\n          fps: parseFloat(mediaInfo.FrameRate),\r\n          framesTotal: parseInt(mediaInfo.FrameCount),\r\n        });\r\n      });\r\n\r\n      videoHtmlElement.preload = 'metadata';\r\n      videoHtmlElement.src = videoUrlObject;\r\n    });\r\n  },\r\n  getVideoFrames: (\r\n    videoData: VideoData,\r\n    imagesToLoad: number,\r\n    processVariant: number\r\n  ) => {\r\n    console.log(processVariant);\r\n    if (processVariant === 1) {\r\n      return VideoUtils.getVideoFrames1(videoData, imagesToLoad);\r\n    }\r\n    return VideoUtils.getVideoFrames2(videoData, imagesToLoad);\r\n  },\r\n  getVideoFrames1: (\r\n    videoData: VideoData,\r\n    imagesToLoad: number\r\n  ) => {\r\n    return new Promise<string[]>(async (resolve) => {\r\n      let videoHtmlElement = document.createElement('video');\r\n\r\n      let seekResolve: any;\r\n      videoHtmlElement.addEventListener('seeked', async () => {\r\n        if (seekResolve) {\r\n          seekResolve();\r\n        }\r\n      });\r\n\r\n      videoHtmlElement.addEventListener('loadeddata', async () => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        const [width, height] = [\r\n          videoHtmlElement.videoWidth,\r\n          videoHtmlElement.videoWidth\r\n        ];\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        const interval = videoData.duration / imagesToLoad;\r\n        let localFrames: string[] = [];\r\n        let currentTime = 0;\r\n\r\n        while (localFrames.length < imagesToLoad) {\r\n          videoHtmlElement.currentTime = currentTime;\r\n          await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\r\n\r\n          context.drawImage(videoHtmlElement, 0, 0, width, height);\r\n          localFrames.push(canvas.toDataURL('image/jpeg'));\r\n\r\n          currentTime += interval;\r\n        }\r\n\r\n        resolve(localFrames);\r\n      });\r\n\r\n      videoHtmlElement.src = videoData.urlObject;\r\n    });\r\n  },\r\n  getVideoFrames2: (\r\n    videoData: VideoData,\r\n    imagesToLoad: number\r\n  ) => {\r\n    return new Promise<File[]>(async (resolve) => {\r\n      let videoHtmlElement = document.createElement('video');\r\n\r\n      let seekResolve: any;\r\n      videoHtmlElement.addEventListener('seeked', async () => {\r\n        if (seekResolve) {\r\n          seekResolve();\r\n        }\r\n      });\r\n\r\n      videoHtmlElement.addEventListener('loadeddata', async () => {\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        const [width, height] = [\r\n          videoHtmlElement.videoWidth,\r\n          videoHtmlElement.videoWidth\r\n        ];\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        const interval = videoData.duration / imagesToLoad;\r\n        const localFrames: File[] = [];\r\n        let framesCount = 0;\r\n        let currentTime = 0;\r\n\r\n        const __convertFrameToFile = (blob: Blob | null) => {\r\n          if (!blob) {\r\n            framesCount++;\r\n          } else {\r\n            const fileName = `${videoData.name}_${framesCount}.jpeg`;\r\n            const fileConfig = { type: 'jpeg' };\r\n            localFrames.push(new File([blob], fileName, fileConfig));\r\n            framesCount++;\r\n          }\r\n          if (framesCount === imagesToLoad) {\r\n            resolve(localFrames);\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < imagesToLoad; ++i) {\r\n          videoHtmlElement.currentTime = currentTime;\r\n          await new Promise<null>((r) => (seekResolve = r)); // eslint-disable-line\r\n\r\n          context.drawImage(videoHtmlElement, 0, 0, width, height);\r\n          canvas.toBlob(__convertFrameToFile);\r\n\r\n          currentTime += interval;\r\n        }\r\n      });\r\n\r\n      videoHtmlElement.src = videoData.urlObject;\r\n    });\r\n  }\r\n};\r\n","import React, { useState } from 'react';\nimport { FrameList } from '../FrameList/FrameList';\nimport { VideoData, VideoUtils } from '../../utils/video.utils';\nimport './App.scss';\nimport {\n  Button,\n  Card,\n  CardBody,\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Spinner\n} from 'reactstrap';\n\nconst IMAGES_TO_LOAD_DEFAULT = 100;\n\nfunction App() {\n  const [frames, setFrames] = useState<string[] | File[]>([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [videoData, setVideoData] = useState<VideoData | null>(null);\n  const [imagesToLoad, setImagesToLoad] = useState(0);\n  const [loaderProgress, setLoaderProgress] = useState(0);\n\n  const [error, setError] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processVariant, setProcessVariant] = useState(1);\n\n  const handleVideoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    setIsModalOpen(true);\n    setVideoData(null);\n    setError('');\n    setProcessVariant(1);\n    try {\n      const data = await VideoUtils.getVideoData(e.target.files[0]);\n      const newImagesToLoad = Math.min(\n        IMAGES_TO_LOAD_DEFAULT,\n        data.framesTotal\n      );\n      const newLoaderProgress = Math.ceil(\n        (newImagesToLoad / data.framesTotal) * 100\n      );\n      setVideoData(data);\n      setImagesToLoad(newImagesToLoad);\n      setLoaderProgress(newLoaderProgress);\n    } catch (e) {\n      setError((e as Error).message);\n    }\n  };\n\n  const handleImagesNumberInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (!videoData) {\n      return;\n    }\n    const newValue = parseInt(e.target.value);\n    const newImagesToLoad = Math.min(\n      isNaN(newValue) ? 0 : newValue,\n      videoData.framesTotal\n    );\n    const newLoaderProgress = Math.ceil(\n      (newImagesToLoad / videoData.framesTotal) * 100\n    );\n    setImagesToLoad(newImagesToLoad);\n    setLoaderProgress(newLoaderProgress);\n  };\n\n  const handleImagesNumberRangeChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (!videoData) {\n      return;\n    }\n    const newLoaderProgress = parseInt(e.target.value);\n    const newImagesToLoad = Math.floor(\n      (newLoaderProgress / 100) * videoData.framesTotal\n    );\n    setImagesToLoad(newImagesToLoad);\n    setLoaderProgress(newLoaderProgress);\n  };\n\n  const handleVideoProcess = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!videoData || !imagesToLoad) {\n      return;\n    }\n    setIsProcessing(true);\n    const newFrames = await VideoUtils.getVideoFrames(\n      videoData,\n      imagesToLoad,\n      processVariant\n    );\n    setIsProcessing(false);\n    setFrames(newFrames);\n    setIsModalOpen(false);\n    console.log(newFrames);\n  };\n\n  return (\n    <div className='App'>\n      <Container className='App__container'>\n        <Card className='App__formCard'>\n          <CardBody>\n            <Label>Select video to process:</Label>\n            <Input type='file' lang='en' onChange={handleVideoChange} />\n          </CardBody>\n        </Card>\n        {!!frames.length && <FrameList frames={frames as string[]} />}\n      </Container>\n      <Modal centered={true} isOpen={isModalOpen}>\n        <Form onSubmit={handleVideoProcess}>\n          <ModalHeader toggle={() => setIsModalOpen(false)}>\n            Video processing\n          </ModalHeader>\n          <ModalBody>\n            {error ? (\n              <div className='text-danger my-4'>{error}</div>\n            ) : !videoData ? (\n              <div className='d-flex justify-content-center my-4'>\n                <Spinner />\n              </div>\n            ) : (\n              <>\n                <FormGroup>\n                  <p>\n                    <b>Video duration:</b> {videoData.duration}\n                  </p>\n                  <p>\n                    <b>Video frames per second:</b> {videoData.fps}\n                  </p>\n                  <p>\n                    <b>Total frames:</b> {videoData.framesTotal}\n                  </p>\n                </FormGroup>\n                <FormGroup>\n                  <video\n                    className='w-100 rounded'\n                    src={videoData.urlObject}\n                    controls={true}\n                    style={{ maxHeight: '30vh' }}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label>\n                    <b>Number of images to load:</b>\n                  </Label>\n                  <Input\n                    type='text'\n                    inputMode='numeric'\n                    pattern='[-+]?[0-9]*[.,]?[0-9]+'\n                    value={imagesToLoad}\n                    onChange={handleImagesNumberInputChange}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Input\n                    type='range'\n                    value={loaderProgress}\n                    onChange={handleImagesNumberRangeChange}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label>\n                    <b>Process variant:</b>\n                  </Label>\n                  <Input\n                    type='select'\n                    onChange={(e) =>\n                      setProcessVariant(parseInt(e.target.value))\n                    }\n                  >\n                    <option value='1'>1</option>\n                    <option value='2'>2</option>\n                  </Input>\n                </FormGroup>\n              </>\n            )}\n          </ModalBody>\n          <ModalFooter className='flex-row-reverse justify-content-between align-items-center'>\n            {error ? (\n              <Button\n                color='dark'\n                outline={true}\n                onClick={() => setIsModalOpen(false)}\n              >\n                Close\n              </Button>\n            ) : (\n              <>\n                <Button\n                  type='submit'\n                  color='dark'\n                  outline={true}\n                  disabled={isProcessing}\n                >\n                  Process video\n                </Button>\n                {isProcessing && <Spinner size='sm' type='grow' />}\n              </>\n            )}\n          </ModalFooter>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'src/components/App/App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}